filter {
    if "pfsense" in [tags] {
        grok {
            add_tag => [ "firewall" ]
            match => [ "message", "<(?<evtid>.*)>(?<datetime>(?:Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\s+(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) (?:2[0123]|[01]?[0-9]):(?:[0-5][0-9]):(?:[0-5][0-9])) (?<prog>.*?): (?<msg>.*)" ]
        }
        mutate {
            gsub => ["datetime","  "," "]
        }
        date {
            match => [ "datetime", "MMM dd HH:mm:ss" ]
            #timezone => "America/Phoenix"
        }
        mutate {
            replace => [ "message", "%{msg}" ]
        }
        mutate {
            remove_field => [ "msg", "datetime" ]
        }
        if [prog] =~ /^filterlog$/ {
            mutate {
                remove_field => [ "msg", "datetime" ]
            }
            grok {
                patterns_dir => "/etc/logstash/patterns"
                match => [ "message", "%{PFSENSE_LOG_DATA}%{PFSENSE_IP_SPECIFIC_DATA}%{PFSENSE_IP_DATA}%{PFSENSE_PROTOCOL_DATA}",
                "message", "%{PFSENSE_LOG_DATA}%{PFSENSE_IPv4_SPECIFIC_DATA_ECN}%{PFSENSE_IP_DATA}%{PFSENSE_PROTOCOL_DATA}" ]
            }
            mutate {
                lowercase => [ 'proto' ]
            }
            geoip {
                add_tag => [ "GeoIP" ]
                source => "src_ip"
           }
        }
        # this isn't what we want; basically splits the logs into separate events, one for each item in the split
        #split {
            #field => "message"
            #target => "message_split"
            #terminator => ","
        #}

        # really only applicable to evtid 134, which is firewall logs 
        # - grok makes it a string; lame
        if [evtid] == "134" {
            csv { 
                skip_header => true
                target => message_csv_filtered
            }
        }

        # after the above, our fields will be in [message_csv_filtered][columnX]; column 1 is rule number
        # column 7 is action; the rest is tricky ipv6 has src/dest in differenat columns than ipv4
        if [message_csv_filtered][column1] {
            #
            mutate {
                copy => { "[message_csv_filtered][column1]" => "[firewall][rule_number]" } 
                copy => { "[message_csv_filtered][column7]" => "[firewall][action]" } 
                copy => { "[message_csv_filtered][column8]" => "[firewall][direction]" } 
                copy => { "[message_csv_filtered][column9]" => "[ip_version]" } 
            }
            mutate {
                remove_field => ["[message_csv_filtered][column1]"]
                remove_field => ["[message_csv_filtered][column7]"]
                remove_field => ["[message_csv_filtered][column8]"]
                remove_field => ["[message_csv_filtered][column9]"]
            }
            # now we can start the logic for manipulating based on ip version
            if [ip_version] == "4" {
                mutate {
                    copy => { "[message_csv_filtered][column17]" => "[protocol]" } 
                    copy => { "[message_csv_filtered][column19]" => "[source][ip]" } 
                    copy => { "[message_csv_filtered][column20]" => "[destination][ip]" } 
                }
                if !([protocol] in ["igmp","icmp"]) {
                    mutate {
                        copy => { "[message_csv_filtered][column21]" => "[source][port]" } 
                        copy => { "[message_csv_filtered][column22]" => "[destination][port]" } 
                    }
                    mutate {
                        remove_field => ["[message_csv_filtered][column21]"]
                        remove_field => ["[message_csv_filtered][column22]"]
                    }
                }
                mutate { 
                    remove_field => ["[message_csv_filtered][column17]"]
                    remove_field => ["[message_csv_filtered][column19]"]
                    remove_field => ["[message_csv_filtered][column20]"]
                }
            }
            if [ip_version] == "6" {
                mutate {
                    copy => { "[message_csv_filtered][column13]" => "[protocol]" } 
                    copy => { "[message_csv_filtered][column16]" => "[source][ip]" } 
                    copy => { "[message_csv_filtered][column17]" => "[destination][ip]" } 
                }
                mutate { 
                    remove_field => ["[message_csv_filtered][column13]"]
                    remove_field => ["[message_csv_filtered][column16]"]
                    remove_field => ["[message_csv_filtered][column17]"]
                }
                if [protocol] not in ["igmp", "Options", "icmp"] {
                    mutate {
                        copy => { "[message_csv_filtered][column18]" => "[source][port]" }
                        copy => { "[message_csv_filtered][column19]" => "[destination][port]" }
                    }
                    mutate { 
                        remove_field => ["[message_csv_filtered][column18]"]
                        remove_field => ["[message_csv_filtered][column19]"]
                    }
                }
            }
        }
    }

    # Begin pfsense NGINX parsing; evtid 174
    # note HOST comes from the syslog parser; not http
    if [evtid] == "174" {
        grok {
            patterns_dir => "/etc/logstash/patterns"
            match => {"message" => "%{NGINX_ACCESS}" }
            tag_on_failure => ["nginx_grok_fail"]
        }
        # make fields conform to ecs
        mutate {
            copy => {"remote_addr" => "[source][ip]" }
            copy => {"http_referer" => "[http][referer]" }
            copy => {"http_user_agent" => "[http][user_agent]" }
            copy => {"status" => "[http][status_code]" }
            copy => {"bytes_sent" => "[http][bytes_sent]" }
        }
        mutate {
            remove_field => ["bytes_sent"]
            remove_field => ["http_referer"]
            remove_field => ["http_user_agent"]
            remove_field => ["remote_addr"]
            remove_field => ["status"]
        }
        # POST is caught in request; split on space 
        csv {
            separator => " "
            source => "request"
            target => "nginxsplit"
        }
        mutate {
            copy => {"[nginxsplit][column1]" => "[http][method]" }
            copy => {"[nginxsplit][column2]" => "[http][url]" }
            copy => {"[nginxsplit][column3]" => "[http][version]" }
        }
        mutate {
            remove_field => ["nginxsplit"]
            remove_field => ["request"]
            add_tag => ["pfnginx"]
        }

        # TYPE CONVERSIONS - this is likely to break or cause conflict mappings
        # because ingest was already happening on string values
        mutate {
            convert => {
                "evtid" => "integer"
                "[http][status_code]" =>  "integer"
                "[http][bytes_sent]" =>  "integer"
                #"[source][ip]" => "ip"
                #"[destination][ip]" => "ip"
            }
        }
    } 
}
